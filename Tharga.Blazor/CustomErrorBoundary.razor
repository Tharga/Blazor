@using Microsoft.Extensions.Logging
@* @using Quilt4Net.Toolkit.Features.Measure *@
@inherits ErrorBoundary
@inject ILogger<CustomErrorBoundary> Logger
@* @inject IWebHostEnvironment Environment *@

@if (CurrentException is null)
{
    @ChildContent
}
else
{
    <div class="error-content">
        <h3>Something went wrong!</h3>

        @if (ErrorContent is not null)
        {
            @ErrorContent(CurrentException)
        }
        else
        {
@*             @if (Environment.IsDevelopment())
            { *@
                <div class="dev-error-details">
                    <strong>Exception Message:</strong> @CurrentException.Message
                    <br />
                    <strong>Stack Trace:</strong>
                    <pre>@CurrentException.StackTrace</pre>
                </div>
@*             }
            else
            {
                <p>We encountered an unexpected error.</p>
            } *@
        }
        <p>This error has been logged with CorrelationId <i>@_correlationId</i>. <ClipboardCopy Content="@($"{_correlationId}")" /></p>
        <button class="btn btn-primary" @onclick="Recover">Try to recover</button>
    </div>
}

@code {
    private Guid _correlationId;

    protected override Task OnErrorAsync(Exception e)
    {
        _correlationId = Guid.NewGuid();

        // e.AddData("CorrelationId", _correlationId);

        // using (Logger.BeginScope(e.ToDictionary()))
        // {
        //     Logger.LogError(e, e.Message);
        // }

        return Task.CompletedTask;
    }
}