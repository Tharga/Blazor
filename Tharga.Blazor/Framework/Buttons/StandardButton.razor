<RadzenButton Text="@Text" Click="@Click" Icon="@Icon" Disabled="@(!Enabled)" Variant="@GetVariant()" Visible="@Visible" ButtonStyle="@GetButtonStyle()" IsBusy="@IsBusy" BusyText="@BusyText" title="@ToolTip" Style="@Style" Shade="@GetShade()" />

@code {
    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public Func<Task> Click { get; set; }

    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public bool Enabled { get; set; } = true;

    [Parameter]
    public bool Visible { get; set; } = true;

    [Parameter]
    public EButtonType Type { get; set; }

    [Parameter]
    public bool IsBusy { get; set; }

    [Parameter]
    public string BusyText { get; set; }

    [Parameter]
    public string ToolTip { get; set; }

    [Parameter]
    public Variant? Variant { get; set; }

    [Parameter]
    public ButtonStyle? ButtonStyle { get; set; }

    [Parameter]
    public Shade? Shade { get; set; }

    [Parameter]
    public string Style { get; set; }

    public enum EButtonType
    {
        Normal,
        //Neutral,
        Discrete,
        Information,
        Warning,
        Error,
        //Running,
        //Idle,
        //Loading,
        Confirm,
        Reject,
        //Delete,
        //Start,
        //Stop
    }

    private ButtonStyle GetButtonStyle()
    {
        if (ButtonStyle.HasValue) return ButtonStyle.Value;

        switch (Type)
        {
            case EButtonType.Normal:
                return Radzen.ButtonStyle.Primary;
            case EButtonType.Information:
                return Radzen.ButtonStyle.Info;
            case EButtonType.Warning:
                return Radzen.ButtonStyle.Warning;
            case EButtonType.Error:
            case EButtonType.Reject:
                return Radzen.ButtonStyle.Danger;
            case EButtonType.Discrete:
                return Radzen.ButtonStyle.Secondary;
            case EButtonType.Confirm:
                return Radzen.ButtonStyle.Success;
            default:
                throw new ArgumentOutOfRangeException($"Unknown type '{Type}'.");
        }
    }

    private Variant GetVariant()
    {
        if (Variant.HasValue) return Variant.Value;

        switch (Type)
        {
            case EButtonType.Normal:
            case EButtonType.Information:
            case EButtonType.Warning:
            case EButtonType.Error:
            case EButtonType.Reject:
            case EButtonType.Confirm:
                return Radzen.Variant.Filled;
            case EButtonType.Discrete:
                return Radzen.Variant.Text;
            default:
                throw new ArgumentOutOfRangeException($"Unknown type '{Type}'.");
        }
    }

    private Shade GetShade()
    {
        if (Shade.HasValue) return Shade.Value;

        return Radzen.Shade.Default;
    }
}