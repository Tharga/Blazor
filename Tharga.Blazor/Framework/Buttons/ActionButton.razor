@using System.Diagnostics
<StandardButton Text="@Text" Icon="@Icon" Click="@ClickWrapper" Type="@StandardButton.EButtonType.Normal" Variant="Variant.Outlined" Enabled="@Enabled" IsBusy="@_executing" BusyText="@GetBusyText()" />

@code {
    private bool _executing;

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public string BusyText { get; set; }

    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public Func<Task> Click { get; set; }

    [Parameter]
    public bool Enabled { get; set; } = true;

    [Parameter]
    public TimeSpan Delay { get; set; } = TimeSpan.Zero;

    private string GetBusyText() => BusyText ?? Text;

    private async Task ClickWrapper()
    {
        try
        {
            _executing = true;
            StateHasChanged();

            await Task.Delay(Delay);

            await Click();
        }
        catch (Exception e)
        {
            //TODO: Show toaster here
            Debugger.Break();
            throw;
        }
        finally
        {
            _executing = false;
            StateHasChanged();
        }
    }

}
