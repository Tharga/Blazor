@inject ILocalStorageService LocalStorageService

<RadzenCard>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Style="margin: calc(-1 * var(--rz-card-padding)); padding: 1rem; cursor: pointer; border-bottom: 1px solid #d6d5d5;" @onclick="OnToggleSelection">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
            <RadzenIcon Icon="@Icon" Visible="@(!string.IsNullOrEmpty(Icon))" />
            <RadzenText Text="@Text" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
            <RadzenStack Orientation="Orientation.Horizontal" Visible="@(TopMenu != null)" Style="margin: calc(-1 * var(--rz-card-padding)) 0;">
                @TopMenu
            </RadzenStack>
            <RadzenIcon Icon="keyboard_arrow_down" Visible="@IsSelected" />
            <RadzenIcon Icon="keyboard_arrow_up" Visible="@(!IsSelected)" />
        </RadzenStack>
    </RadzenStack>
    <RadzenStack Visible="@IsSelected" Style="margin-top: calc(2 * var(--rz-card-padding))">
        @ChildContent
    </RadzenStack>
</RadzenCard>

@code {
    private bool? _selected;

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public bool AllowSaveState { get; set; } = true;

    [Parameter]
    public bool Selected { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public RenderFragment TopMenu { get; set; }

    private bool IsSelected => _selected ?? Selected;
    // private string StorageName => $"ExpandableCard.{Text.ToBase64String()}.Selected";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AllowSaveState)
        {
            // _selected = await LocalStorageService.GetItemAsync<bool?>(StorageName);
            if (_selected != Selected)
            {
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnToggleSelection()
    {
        _selected = !(_selected ?? Selected);

        if (AllowSaveState)
        {
            // await LocalStorageService.SetItemAsync(StorageName, _selected);
        }
    }
}