@using Microsoft.Extensions.Logging
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITeamStateService TeamStateService
@inject ITeamService TeamService
@inject ILogger<TeamSelector> Logger

<AuthorizeView>
    <Authorized>
        @if (_teams == null)
        {
            <RadzenProgressBarCircular Value="100" Mode="ProgressBarMode.Indeterminate" ShowValue="true" Size="ProgressBarCircularSize.ExtraSmall">
                <Template>Loading...</Template>
            </RadzenProgressBarCircular>
        }
        else if (_teams.Length == 1)
        {
            <RadzenImage Path="@_selectedTeam.Icon" class="rz-gravatar" Visible="@(!string.IsNullOrEmpty(_selectedTeam.Icon))" />
            <span>@_selectedTeam.Name</span>
        }
        else if (_teams.Length > 1)
        {
            <RadzenImage Path="@_selectedTeam.Icon" class="rz-gravatar" Visible="@(!string.IsNullOrEmpty(_selectedTeam.Icon))" />
            <RadzenDropDown @bind-Value=@SelectedTeam Data="@(_teams.OrderBy(f => f.Name))" TextProperty="Name" />
        }
    </Authorized>
</AuthorizeView>

@code {
    private ITeam _selectedTeam;
    private ITeam[] _teams;
    private string _currentUserEmail;

    private ITeam SelectedTeam
    {
        get => _selectedTeam;
        set
        {
            if (_selectedTeam == value) return;
            if (_selectedTeam != null && _selectedTeam.Key == value?.Key)
            {
                _selectedTeam = value;
            }
            else
            {
                _selectedTeam = value;
                TeamStateService.SetCurrentAndRefresh(_selectedTeam);
            }
            // Task.Run(async () => await ReportActivityAsync());
        }
    }

    // private async Task UpdateUserInfoAsync()
    // {
    //     //var currentUser = await FortDocsUserProvider.GetCurrentUser();
    //     //if (currentUser != null) _currentUserEmail = currentUser.Email;
    // }

    protected override async Task OnInitializedAsync()
    {
        var current = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (current.User.Identity?.IsAuthenticated ?? false)
        {
            await ReloadTeams(current);
        }

        TeamStateService.TeamChangeEvent += async (_, _) =>
        {
            await ReloadTeams(current);
        };

        // TeamStateService.RequestReloadEvent += async (_, _) =>
        // {
        //     try
        //     {
        //         await ReloadTeams();
        //     }
        //     catch (Exception e)
        //     {
        //         Logger?.LogError(e, e.Message);
        //     }
        // };

        AuthenticationStateProvider.AuthenticationStateChanged += async e =>
        {
            try
            {
                if (e.Result.User.Identity?.IsAuthenticated ?? false)
                {
                    // await UpdateUserInfoAsync();
                    await ReloadTeams(e.Result);
                    // await ReportActivityAsync();
                }
            }
            catch (Exception exception)
            {
                Logger?.LogError(exception, exception.Message);
            }
        };

        // var ast = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // if (ast.User.Identity?.IsAuthenticated ?? false)
        // {
        //     //TODO: Reload menu here?
        // }

        await base.OnInitializedAsync();
    }

    private async Task ReloadTeams(AuthenticationState current)
    {
        _teams = await TeamService.GetTeamsAsync(current.User).ToArrayAsync();

        if (!_teams.Any())
        {
            var team = await TeamService.CreateTeamAsync(current.User);
            _teams = [team];
            SelectedTeam = team;
        }
        else if (_teams.Length == 1)
        {
            SelectedTeam = _teams.Single();
        }
        else if (SelectedTeam == null || !_teams.Contains(SelectedTeam))
        {
            SelectedTeam = TeamStateService.SelectedTeam != null && _teams.Contains(TeamStateService.SelectedTeam)
                ? TeamStateService.SelectedTeam
                : _teams.FirstOrDefault();
        }

        //TODO: Do this on the SelectedTeam-property, if it actually changes?
        StateHasChanged();

        // _teams = await FarmService.GetAsync();

        // if (_teams != null)
        // {
        //     if (_teams.Length == 1)
        //     {
        //         SelectedTeam = _teams.Single();
        //     }
        //     else if (SelectedTeam == null || !_teams.Contains(SelectedTeam))
        //     {
        //         SelectedTeam = TeamStateService.CurrentFarm != null && _teams.Contains(TeamStateService.CurrentFarm)
        //             ? TeamStateService.CurrentFarm
        //             : _teams.FirstOrDefault();
        //     }

        //     StateHasChanged();
        // }
    }

}
