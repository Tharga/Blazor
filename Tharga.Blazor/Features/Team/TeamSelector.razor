@using Microsoft.Extensions.Logging
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITeamStateService TeamStateService
@inject ITeamService TeamService
@inject ILogger<TeamSelector> Logger

<AuthorizeView>
    <Authorized>
        @if (_teams == null || SelectedTeam == null)
        {
            <RadzenProgressBarCircular Value="100" Mode="ProgressBarMode.Indeterminate" ShowValue="true" Size="ProgressBarCircularSize.ExtraSmall">
                <Template>Loading...</Template>
            </RadzenProgressBarCircular>
        }
        else if (_teams.Length == 1)
        {
            <RadzenImage Path="@SelectedTeam.Icon" class="rz-gravatar" Visible="@(!string.IsNullOrEmpty(SelectedTeam.Icon))" />
            <span>@SelectedTeam.Name</span>
        }
        else if (_teams.Length > 1)
        {
            <RadzenImage Path="@SelectedTeam.Icon" class="rz-gravatar" Visible="@(!string.IsNullOrEmpty(SelectedTeam.Icon))" />
            <RadzenDropDown @bind-Value=@SelectedTeam Data="@(_teams.OrderBy(f => f.Name))" TextProperty="Name" />
        }
    </Authorized>
</AuthorizeView>

@code {
    private ITeam[] _teams;
    private string _currentUserEmail;
    private ITeam _selectedTeam;

    private ITeam SelectedTeam
    {
        get => _selectedTeam;
        set
        {
            if (_selectedTeam == value) return;
            _selectedTeam = value;
            TeamStateService.SetSelectedTeamAsync(_selectedTeam);
        }
    }

    // private ITeam SelectedTeam
    // {
    //     get => TeamStateService.SelectedTeam;
    //     set => TeamStateService.SelectedTeam = value;
    // }

    // private ITeam SelectedTeam
    // {
    //     get => _selectedTeam;
    //     set
    //     {
    //         if (_selectedTeam == value) return;
    //         _selectedTeam = value;
    //         // TeamStateService.SetCurrent(_selectedTeam);
    //         // if (_selectedTeam != null && _selectedTeam.Key == value?.Key)
    //         // {
    //         //     _selectedTeam = value;
    //         // }
    //         // else
    //         // {
    //         //     _selectedTeam = value;
    //         //     TeamStateService.SetCurrent(_selectedTeam, true);
    //         // }
    //         // Task.Run(async () => await ReportActivityAsync());
    //     }
    // }

    // private async Task UpdateUserInfoAsync()
    // {
    //     //var currentUser = await FortDocsUserProvider.GetCurrentUser();
    //     //if (currentUser != null) _currentUserEmail = currentUser.Email;
    // }

    protected override async Task OnInitializedAsync()
    {
        TeamStateService.SelectedTeamChangedEvent += async (_, e) =>
        {
            _selectedTeam = e.SelectedTeam;
            await InvokeAsync(StateHasChanged);
        };

        TeamStateService.TeamsListChangedEvent += async (_, _) =>
        {
            await ReloadTeams();
        };

        // TeamStateService.RequestReloadEvent += async (_, _) =>
        // {
        //     try
        //     {
        //         await ReloadTeams();
        //     }
        //     catch (Exception e)
        //     {
        //         Logger?.LogError(e, e.Message);
        //     }
        // };

        // AuthenticationStateProvider.AuthenticationStateChanged += async e =>
        // {
        //     try
        //     {
        //         if (e.Result.User.Identity?.IsAuthenticated ?? false)
        //         {
        //             // await UpdateUserInfoAsync();
        //             await ReloadTeams(e.Result);
        //             // await ReportActivityAsync();
        //         }
        //     }
        //     catch (Exception exception)
        //     {
        //         Logger?.LogError(exception, exception.Message);
        //     }
        // };

        // var ast = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // if (ast.User.Identity?.IsAuthenticated ?? false)
        // {
        //     //TODO: Reload menu here?
        // }

        var current = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (current.User.Identity?.IsAuthenticated ?? false)
        {
            await ReloadTeams();
        }

        await base.OnInitializedAsync();
    }

    private async Task ReloadTeams()
    {
        _teams = await TeamService.GetTeamsAsync().ToArrayAsync();
        await InvokeAsync(StateHasChanged);

        if (SelectedTeam == null) SelectedTeam = await TeamStateService.GetSelectedTeamAsync();
    }

}
