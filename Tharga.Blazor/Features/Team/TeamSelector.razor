@using Microsoft.Extensions.Logging
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITeamStateService TeamStateService
@inject ITeamService TeamService
@inject ILogger<TeamSelector> Logger

<AuthorizeView>
    <Authorized>
        @if (_teams == null || SelectedTeam == null)
        {
            <RadzenProgressBarCircular Value="100" Mode="ProgressBarMode.Indeterminate" ShowValue="true" Size="ProgressBarCircularSize.ExtraSmall">
                <Template>Loading...</Template>
            </RadzenProgressBarCircular>
        }
        else if (_teams.Length == 1)
        {
            <RadzenImage Path="@SelectedTeam.Icon" class="rz-gravatar" Visible="@(!string.IsNullOrEmpty(SelectedTeam.Icon))" />
            <span>@SelectedTeam.Name</span>
        }
        else if (_teams.Length > 1)
        {
            <RadzenImage Path="@SelectedTeam.Icon" class="rz-gravatar" Visible="@(!string.IsNullOrEmpty(SelectedTeam.Icon))" />
            <RadzenDropDown @bind-Value=@SelectedTeam Data="@(_teams.OrderBy(f => f.Name))" TextProperty="Name" />
        }
    </Authorized>
</AuthorizeView>

@code {
    private ITeam[] _teams;
    private string _currentUserEmail;
    private ITeam _selectedTeam;

    private ITeam SelectedTeam
    {
        get => _selectedTeam;
        set
        {
            if (_selectedTeam == value) return;
            _selectedTeam = value;
            TeamStateService.SetSelectedTeamAsync(_selectedTeam);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        TeamStateService.SelectedTeamChangedEvent += async (_, e) =>
        {
            _selectedTeam = e.SelectedTeam;
            await InvokeAsync(StateHasChanged);
        };

        TeamStateService.TeamsListChangedEvent += async (_, _) =>
        {
            await ReloadTeams();
        };

        var current = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (current.User.Identity?.IsAuthenticated ?? false)
        {
            await ReloadTeams();
        }

        await base.OnInitializedAsync();
    }

    private async Task ReloadTeams()
    {
        _teams = await TeamService.GetTeamsAsync().ToArrayAsync();
        SelectedTeam ??= await TeamStateService.GetSelectedTeamAsync();
        await InvokeAsync(StateHasChanged);
    }

}
